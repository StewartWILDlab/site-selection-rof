---
title: "Land Cover Analysis"
---

```{r include=FALSE}
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
backup_options <- options()
options(scipen = 1, digits = 2)
do_eval <- FALSE
```

## Loading data

We load the possible sites (`quiet = TRUE` is for not displaying verbose loading information). We also load the two halves of the far north land cover dataset, along with the the attribute table of land cover classes.

```{r message=FALSE}
sites_possible <- sf::st_read(
  "data/Peat/GRTS_PossibleCaARU_sample_draw_base.shp", 
  quiet = TRUE)
lu_16 <- raster::raster("data/land_use/FarNorth_LandCover_Class_UTM16.tif")
lu_17 <- raster::raster("data/land_use/FarNorth_LandCover_Class_UTM17.tif")
lu_dat <- readr::read_csv("data/land_use/attr_table_northen_ont_lc.txt") |>
  dplyr::mutate(cats = as.factor(code))
```

## Extracting Land Cover data

The following functions will take care of land cover extraction.

```{r message=FALSE}
extract_from_points <- function(scale_m, sites, lu) {
  
  sites_buffer <- sites |>
    sf::st_transform(sf::st_crs(lu)) |> 
    sf::st_buffer(dist = scale_m) |> 
    dplyr::select(siteID)
  
  extr <- exactextractr::exact_extract(lu, sites_buffer,
                                       progress = FALSE)
  
  extr <- mapply(extr, 1:length(extr), 
                 FUN = \(x, y) dplyr::mutate(x, id = y),
                 SIMPLIFY = F)
  
  extr_df <- do.call(rbind, extr) |>
    dplyr::filter(!is.na(value)) |>
    dplyr::relocate(id)
  
  return(extr_df)
   
}

compute_land_cover <- function(scale_m, sites, 
                               lu_16, lu_17, lu_dat) {
  
  extr_16_df <- extract_from_points(scale_m, sites, lu_16)
  extr_17_df <- extract_from_points(scale_m, sites, lu_17)
  
  stopifnot(all(!(extr_16_df$siteID %in% extr_17_df$siteID)))
  
  extr <- rbind(extr_16_df, extr_17_df) |>
    dplyr::arrange(id, value)
  
  extr_table <- extr |>
    dplyr::group_by(id, value) |>
    dplyr::summarise(coverage_fraction_sum = sum(coverage_fraction)) |>
    dplyr::mutate(props = 
                    coverage_fraction_sum/sum(coverage_fraction_sum)) |>
    dplyr::ungroup()  |>
    dplyr::mutate(value = as.factor(value)) |>
    dplyr::left_join(lu_dat, by = c("value" = "cats")) |>
    dplyr::select(id, category_code, props, label)
  
  extr_table[is.na(extr_table)] <- 0
  
  extr_table_sum <- extr_table |>
    dplyr::group_by(category_code, label) |>
    dplyr::summarise(prop_sum = sum(props)) |>
    dplyr::ungroup()
  
  return(extr_table_sum)

}
```

We extract at different scales (buffer radius around points): 1 m, 50 m, 100 m and 1 km.

```{r message=FALSE}
res <- mapply(FUN = compute_land_cover, c(`1 m` = 1, `50 m` = 50,
                                          `100 m` = 100, `1 km` = 1000),
              MoreArgs = list(
                sites = sites_possible,
                lu_16 = lu_16, lu_17 = lu_17, lu_dat = lu_dat),
              SIMPLIFY = F) |>
  dplyr::bind_rows(.id = 'scale') |>
  dplyr::mutate(scale = forcats::fct_relevel(scale, "1 m", "50 m",
                                             "100 m", "1 km"),
                label =  forcats::fct_reorder(label, prop_sum)) |> 
  dplyr::arrange(scale, dplyr::desc(prop_sum))

knitr::kable(res)
```

We can plot the results with "dodged" ggplot2 barplots.

```{r}
library(ggplot2)

my_pal <- c('#c7e9b4','#7fcdbb','#41b6c4','#2c7fb8','#253494')

ggplot(res) +
  geom_bar(aes(x = label, y = prop_sum, fill = scale, colour = scale), 
           alpha = 0.8,
           stat = "identity",
           position = "dodge") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 20, vjust = 1, hjust = 1)) +
  labs(x = "Land Use Class", y = "Sum of Proportions",
       fill = "Scale", colour = "Scale") +
  scale_fill_manual(values = my_pal) +
  scale_color_manual(values = my_pal)
```

