[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Land Cover Analysis",
    "section": "",
    "text": "We load the possible sites (quiet = TRUE is for not displaying verbose loading information). We also load the two halves of the far north land cover dataset, along with the the attribute table of land cover classes. We load the ecodistrict data and select for the relevant lowlands disctrict, coded as 1028.\n\nsites_possible &lt;- sf::st_read(\n  \"data/sites/GRTS_PossibleCaARU_sample_draw_base.shp\", \n  quiet = TRUE) |&gt; \n  dplyr::mutate(source = \"GRTS_PossibleCaARU_sample_draw_base\") |&gt; \n  dplyr::mutate(fullID = paste(SampleID, ID, source, sep = \"_\"))\n\nadditional_sites &lt;- readr::read_csv(\"data/sites/Selected_Peat_Sites.csv\") |&gt; \n  sf::st_as_sf(coords=c(\"lon_WGS84\", \"lat_WGS84\"), crs = 4326)  |&gt; \n  sf::st_transform(sf::st_crs(sites_possible)) |&gt; \n  dplyr::mutate(source = \"Selected_Peat_Sites\") |&gt; \n  dplyr::mutate(fullID = paste(SampleID, ID, source, sep = \"_\"))\n\nall_sites &lt;- sites_possible |&gt; \n  dplyr::bind_rows(additional_sites)\n\necodistrict &lt;- sf::st_read(\n  \"data/ecodistrict_shp/Ecodistricts/ecodistricts.shp\", \n  quiet = TRUE) |&gt; \n  dplyr::filter(ECODISTRIC == 1028)\nlu_16 &lt;- raster::raster(\"data/land_use/FarNorth_LandCover_Class_UTM16.tif\")\nlu_17 &lt;- raster::raster(\"data/land_use/FarNorth_LandCover_Class_UTM17.tif\")\nlu_dat &lt;- readr::read_csv(\"data/land_use/attr_table_northen_ont_lc.txt\") |&gt;\n  dplyr::mutate(cats = as.factor(code))",
    "crumbs": [
      "Site Analysis",
      "Land Cover Analysis"
    ]
  },
  {
    "objectID": "index.html#loading-data",
    "href": "index.html#loading-data",
    "title": "Land Cover Analysis",
    "section": "",
    "text": "We load the possible sites (quiet = TRUE is for not displaying verbose loading information). We also load the two halves of the far north land cover dataset, along with the the attribute table of land cover classes. We load the ecodistrict data and select for the relevant lowlands disctrict, coded as 1028.\n\nsites_possible &lt;- sf::st_read(\n  \"data/sites/GRTS_PossibleCaARU_sample_draw_base.shp\", \n  quiet = TRUE) |&gt; \n  dplyr::mutate(source = \"GRTS_PossibleCaARU_sample_draw_base\") |&gt; \n  dplyr::mutate(fullID = paste(SampleID, ID, source, sep = \"_\"))\n\nadditional_sites &lt;- readr::read_csv(\"data/sites/Selected_Peat_Sites.csv\") |&gt; \n  sf::st_as_sf(coords=c(\"lon_WGS84\", \"lat_WGS84\"), crs = 4326)  |&gt; \n  sf::st_transform(sf::st_crs(sites_possible)) |&gt; \n  dplyr::mutate(source = \"Selected_Peat_Sites\") |&gt; \n  dplyr::mutate(fullID = paste(SampleID, ID, source, sep = \"_\"))\n\nall_sites &lt;- sites_possible |&gt; \n  dplyr::bind_rows(additional_sites)\n\necodistrict &lt;- sf::st_read(\n  \"data/ecodistrict_shp/Ecodistricts/ecodistricts.shp\", \n  quiet = TRUE) |&gt; \n  dplyr::filter(ECODISTRIC == 1028)\nlu_16 &lt;- raster::raster(\"data/land_use/FarNorth_LandCover_Class_UTM16.tif\")\nlu_17 &lt;- raster::raster(\"data/land_use/FarNorth_LandCover_Class_UTM17.tif\")\nlu_dat &lt;- readr::read_csv(\"data/land_use/attr_table_northen_ont_lc.txt\") |&gt;\n  dplyr::mutate(cats = as.factor(code))",
    "crumbs": [
      "Site Analysis",
      "Land Cover Analysis"
    ]
  },
  {
    "objectID": "index.html#extracting-land-cover-data",
    "href": "index.html#extracting-land-cover-data",
    "title": "Land Cover Analysis",
    "section": "Extracting Land Cover data",
    "text": "Extracting Land Cover data\nThe following functions will take care of land cover extraction for sites.\n\nextract_from_points &lt;- function(scale_m, sites, lu) {\n  \n  sites_buffer &lt;- sites |&gt;\n    sf::st_transform(sf::st_crs(lu)) |&gt; \n    sf::st_buffer(dist = scale_m) |&gt; \n    dplyr::select(fullID)\n  \n  extr &lt;- exactextractr::exact_extract(lu, sites_buffer,\n                                       progress = FALSE,\n                                       include_cols = \"fullID\")\n  \n  extr &lt;- mapply(extr, 1:length(extr), \n                 FUN = \\(x, y) dplyr::mutate(x, id = y),\n                 SIMPLIFY = F)\n  \n  extr_df &lt;- do.call(rbind, extr) |&gt;\n    dplyr::filter(!is.na(value)) |&gt;\n    dplyr::relocate(id)\n  \n  return(extr_df)\n  \n}\n\ncompute_land_cover &lt;- function(scale_m, sites, \n                               lu_16, lu_17, lu_dat,\n                               summarise_all = TRUE) {\n  \n  extr_16_df &lt;- extract_from_points(scale_m, sites, lu_16)\n  extr_17_df &lt;- extract_from_points(scale_m, sites, lu_17)\n  \n  stopifnot(all(!(extr_16_df$siteID %in% extr_17_df$siteID)))\n  \n  extr &lt;- rbind(extr_16_df, extr_17_df) |&gt;\n    dplyr::arrange(id, value)\n  \n  if (summarise_all) {\n    \n    extr_table &lt;- extr |&gt;\n      dplyr::group_by(value) |&gt;\n      dplyr::summarise(coverage_fraction_sum = sum(coverage_fraction)) |&gt;\n      dplyr::mutate(prop = \n                      coverage_fraction_sum/sum(coverage_fraction_sum)) |&gt;\n      dplyr::ungroup()  |&gt;\n      dplyr::mutate(value = as.factor(value)) |&gt;\n      dplyr::left_join(lu_dat, by = c(\"value\" = \"cats\")) |&gt;\n      dplyr::select(category_code, prop, label)\n         \n  } else {\n    \n     extr_table &lt;- extr |&gt;\n      dplyr::group_by(fullID, value) |&gt;\n      dplyr::summarise(coverage_fraction_sum = sum(coverage_fraction)) |&gt;\n      dplyr::mutate(prop = \n                      coverage_fraction_sum/sum(coverage_fraction_sum)) |&gt;\n      dplyr::ungroup()  |&gt;\n      dplyr::mutate(value = as.factor(value)) |&gt;\n      dplyr::left_join(lu_dat, by = c(\"value\" = \"cats\")) |&gt;\n      dplyr::select(fullID, category_code, prop, label)\n    \n  }\n  \n  extr_table[is.na(extr_table)] &lt;- 0\n  \n  return(extr_table)\n  \n}\n\nWe extract at different scales (buffer radius around points): 1 m, 50 m, 100 m and 1 km.\n\nres_points &lt;- mapply(FUN = compute_land_cover, \n                     c(`1 m` = 1, `50 m` = 50,\n                       `100 m` = 100, `1 km` = 1000),\n                     MoreArgs = list(\n                       sites = sites_possible,\n                       lu_16 = lu_16, lu_17 = lu_17, lu_dat = lu_dat),\n                     SIMPLIFY = F) |&gt;\n  dplyr::bind_rows(.id = 'scale') |&gt;\n  dplyr::mutate(scale = forcats::fct_relevel(scale, \"1 m\", \"50 m\",\n                                             \"100 m\", \"1 km\"),\n                label =  forcats::fct_reorder(label, prop)) |&gt; \n  dplyr::arrange(scale, dplyr::desc(prop))\n\nknitr::kable(res_points)\n\n\n\n\nscale\ncategory_code\nprop\nlabel\n\n\n\n\n1 m\nTrBOG\n0.26\nTreed Bog\n\n\n1 m\nTrFEN\n0.23\nTreed Fen\n\n\n1 m\nOBOG\n0.20\nOpen Bog\n\n\n1 m\nConSWA\n0.11\nConiferous Swamp\n\n\n1 m\nConTRE\n0.10\nConiferous Treed\n\n\n1 m\nOFEN\n0.06\nOpen Fen\n\n\n1 m\nSpTRE\n0.02\nSparse Treed\n\n\n1 m\nMixTRE\n0.02\nMixed Treed\n\n\n50 m\nTrBOG\n0.23\nTreed Bog\n\n\n50 m\nTrFEN\n0.22\nTreed Fen\n\n\n50 m\nOBOG\n0.21\nOpen Bog\n\n\n50 m\nConSWA\n0.12\nConiferous Swamp\n\n\n50 m\nConTRE\n0.09\nConiferous Treed\n\n\n50 m\nOFEN\n0.07\nOpen Fen\n\n\n50 m\nSpTRE\n0.03\nSparse Treed\n\n\n50 m\nMixTRE\n0.02\nMixed Treed\n\n\n50 m\nWAT\n0.01\nClear Open Water\n\n\n50 m\nXWAT\n0.00\nTurbid Water\n\n\n100 m\nTrBOG\n0.23\nTreed Bog\n\n\n100 m\nTrFEN\n0.22\nTreed Fen\n\n\n100 m\nOBOG\n0.20\nOpen Bog\n\n\n100 m\nConSWA\n0.12\nConiferous Swamp\n\n\n100 m\nConTRE\n0.10\nConiferous Treed\n\n\n100 m\nOFEN\n0.08\nOpen Fen\n\n\n100 m\nWAT\n0.03\nClear Open Water\n\n\n100 m\nSpTRE\n0.02\nSparse Treed\n\n\n100 m\nMixTRE\n0.01\nMixed Treed\n\n\n100 m\nXWAT\n0.01\nTurbid Water\n\n\n1 km\nTrFEN\n0.21\nTreed Fen\n\n\n1 km\nTrBOG\n0.21\nTreed Bog\n\n\n1 km\nOBOG\n0.19\nOpen Bog\n\n\n1 km\nConSWA\n0.17\nConiferous Swamp\n\n\n1 km\nOFEN\n0.07\nOpen Fen\n\n\n1 km\nConTRE\n0.06\nConiferous Treed\n\n\n1 km\nWAT\n0.04\nClear Open Water\n\n\n1 km\nMixTRE\n0.01\nMixed Treed\n\n\n1 km\nXWAT\n0.01\nTurbid Water\n\n\n1 km\nThSWA\n0.01\nThicket Swamp\n\n\n1 km\nSpTRE\n0.00\nSparse Treed\n\n\n1 km\nNSWood\n0.00\nDisturbance - Non and Sparse Woody\n\n\n1 km\nDecTRE\n0.00\nDeciduous Treed\n\n\n1 km\nTrOrSHr\n0.00\nDisturbance - Treed and/or Shrub\n\n\n1 km\nBED\n0.00\nBedrock\n\n\n\n\n\nWe also want to do the same operation for the ecodistrict to allow for comparison. We don’t need to use exact extraction, insteadt the crop and mask each raster. This operation is costly so we write out the rasters and load them again (see unrendered code).\n\necodistrict_16 &lt;- sf::st_transform(ecodistrict, sf::st_crs(lu_16))\necodistrict_17 &lt;- sf::st_transform(ecodistrict, sf::st_crs(lu_17))\n\nlu_16_crop &lt;- raster::crop(lu_16, ecodistrict_16)\nlu_16_crop_mask &lt;- raster::mask(lu_16_crop, ecodistrict_16)\n\nlu_17_crop &lt;- raster::crop(lu_17, ecodistrict_17)\nlu_17_crop_mask &lt;- raster::mask(lu_17_crop, ecodistrict_17)\n\nWe can then get the frequencies of values. This operation is also costly so we write out the objects and load them again (see unrendered code).\n\nlu_16_freq &lt;- raster::freq(lu_16_crop_mask)\nlu_17_freq &lt;- raster::freq(lu_17_crop_mask)\n\nWe combine the results of both UTMs.\n\nres_ecodistrict &lt;- rbind(lu_16_freq, lu_17_freq) |&gt;\n  as.data.frame() |&gt; \n  dplyr::group_by(value) |&gt; \n  dplyr::summarise(count = sum(count)) |&gt; \n  dplyr::ungroup() |&gt; \n  dplyr::filter(!is.na(value)) |&gt; \n  dplyr::mutate(prop = count/sum(count)) |&gt; \n  dplyr::mutate(value = as.factor(value)) |&gt;\n  dplyr::left_join(lu_dat, by = c(\"value\" = \"cats\")) |&gt;\n  dplyr::filter(!is.na(label)) |&gt; \n  dplyr::select(category_code, prop, label) |&gt; \n  dplyr::mutate(scale = \"Ecodistrict\") |&gt; \n  dplyr::relocate(scale) |&gt;\n  dplyr::arrange(scale, dplyr::desc(prop))\n\nknitr::kable(res_ecodistrict)\n\n\n\n\nscale\ncategory_code\nprop\nlabel\n\n\n\n\nEcodistrict\nTrFEN\n0.25\nTreed Fen\n\n\nEcodistrict\nOBOG\n0.20\nOpen Bog\n\n\nEcodistrict\nTrBOG\n0.19\nTreed Bog\n\n\nEcodistrict\nConSWA\n0.12\nConiferous Swamp\n\n\nEcodistrict\nOFEN\n0.09\nOpen Fen\n\n\nEcodistrict\nWAT\n0.07\nClear Open Water\n\n\nEcodistrict\nConTRE\n0.04\nConiferous Treed\n\n\nEcodistrict\nNSWood\n0.01\nDisturbance - Non and Sparse Woody\n\n\nEcodistrict\nTrOrSHr\n0.01\nDisturbance - Treed and/or Shrub\n\n\nEcodistrict\nMixTRE\n0.01\nMixed Treed\n\n\nEcodistrict\nThSWA\n0.01\nThicket Swamp\n\n\nEcodistrict\nSpTRE\n0.00\nSparse Treed\n\n\nEcodistrict\nXWAT\n0.00\nTurbid Water\n\n\nEcodistrict\nDecTRE\n0.00\nDeciduous Treed\n\n\nEcodistrict\nMIN\n0.00\nSand/Gravel/Mine Tailings\n\n\nEcodistrict\nFrMAR\n0.00\nFreshwater Marsh\n\n\nEcodistrict\nBED\n0.00\nBedrock\n\n\nEcodistrict\nURB\n0.00\nCommunity/Infrastructure\n\n\nEcodistrict\nDecSWA\n0.00\nDeciduous Swamp\n\n\nEcodistrict\nInMAR\n0.00\nIntertidal Marsh\n\n\n\n\n\nAnd then combine the results between scales and utm.\n\nres &lt;- rbind(res_points, res_ecodistrict) |&gt; \n  tidyr::complete(scale, label) |&gt; \n  tidyr::replace_na(list(prop = 0)) |&gt; \n  dplyr::mutate(label = forcats::fct_reorder(label, prop))\n\nFor individual site identity, at different scales:\n\nres_points_by_site &lt;- \n  mapply(FUN = compute_land_cover, \n         c(`1 m` = 1, `50 m` = 50,\n           `100 m` = 100, `1 km` = 1000),\n         MoreArgs = list(\n           sites = sites_possible,\n           lu_16 = lu_16, lu_17 = lu_17, lu_dat = lu_dat),\n           summarise_all = FALSE,\n         SIMPLIFY = F) |&gt;\n  dplyr::bind_rows(.id = 'scale') |&gt;\n  dplyr::mutate(scale = forcats::fct_relevel(scale, \"1 m\", \"50 m\",\n                                             \"100 m\", \"1 km\"),\n                label =  forcats::fct_reorder(label, prop)) |&gt;\n  \n  dplyr::group_by(scale, fullID)  |&gt; \n  dplyr::arrange(dplyr::desc(prop)) |&gt; \n  dplyr::rename(primary_category_code = category_code,\n                primary_prop = prop,\n                primary_label = label) |&gt; \n  dplyr::mutate(secondary_category_code = primary_category_code[2],\n                secondary_prop = primary_prop[2],\n                secondary_label = primary_label[2],\n                prop_sum = primary_prop + secondary_prop) |&gt; \n  dplyr::slice(1) |&gt; \n  dplyr::ungroup() |&gt; \n  dplyr::arrange(fullID)\n\n`summarise()` has grouped output by 'fullID'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'fullID'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'fullID'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'fullID'. You can override using the\n`.groups` argument.\n\nDT::datatable(res_points_by_site)",
    "crumbs": [
      "Site Analysis",
      "Land Cover Analysis"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#plotting-spatial-data",
    "href": "index.html#plotting-spatial-data",
    "title": "Land Cover Analysis",
    "section": "Plotting spatial data",
    "text": "Plotting spatial data\nIt is always a good idea to try and plot spatial data before any processing.\n\nggplot() +\n  geom_sf(data = ecodistrict) +\n  geom_sf(data = sf::st_transform(all_sites, \n                                  sf::st_crs(ecodistrict))) +\n  theme_bw()\n\n\n\n\n\n\n\n\nPlotting the land cover data is difficult because it is provided is two different UTMs.",
    "crumbs": [
      "Site Analysis",
      "Land Cover Analysis"
    ]
  },
  {
    "objectID": "index.html#results",
    "href": "index.html#results",
    "title": "Land Cover Analysis",
    "section": "Results",
    "text": "Results\nWe can plot the results with “dodged” ggplot2 barplots.\n\nmy_pal &lt;- c('#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#0c2c84')\n\nggplot(res) +\n  geom_bar(aes(x = label, y = prop, fill = scale, colour = scale), \n           alpha = 0.8,\n           stat = \"identity\",\n           position = \"dodge\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 20, vjust = 1, hjust = 1)) +\n  labs(x = \"Land Use Class\", y = \"Proportion\",\n       fill = \"Scale\", colour = \"Scale\") +\n  scale_fill_manual(values = my_pal) +\n  scale_color_manual(values = my_pal)\n\n\n\n\n\n\n\n\nRemoving the land use classes than are not present around sites, we get a slightly easier graph to read.\n\nonly_at_sites &lt;- res |&gt; \n  dplyr::filter(prop &gt; 0) |&gt; \n  dplyr::filter(scale != \"Ecodistrict\") |&gt; \n  dplyr::pull(label)\n\nres_filt &lt;- res |&gt; \n  dplyr::filter(label %in% only_at_sites)\n\nggplot(res_filt) +\n  geom_bar(aes(x = label, y = prop, fill = scale, colour = scale), \n           alpha = 0.8,\n           stat = \"identity\",\n           position = \"dodge\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 20, vjust = 1, hjust = 1)) +\n  labs(x = \"Land Use Class\", y = \"Proportion\",\n       fill = \"Scale\", colour = \"Scale\") +\n  scale_fill_manual(values = my_pal) +\n  scale_color_manual(values = my_pal)",
    "crumbs": [
      "Site Analysis",
      "Land Cover Analysis"
    ]
  }
]